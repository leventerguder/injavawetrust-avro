/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A simple name (attribute) and no namespace attribute: use the null namespace (""); the fullname is 'Example'. */
@org.apache.avro.specific.AvroGenerated
public class Example extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1364572121179870628L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Example\",\"doc\":\"A simple name (attribute) and no namespace attribute: use the null namespace (\\\"\\\"); the fullname is 'Example'.\",\"fields\":[{\"name\":\"inheritNull\",\"type\":{\"type\":\"enum\",\"name\":\"Simple\",\"doc\":\"A simple name (attribute) and no namespace attribute: inherit the null namespace of the enclosing type 'Example'. The fullname is 'Simple'.\",\"symbols\":[\"a\",\"b\"]}},{\"name\":\"explicitNamespace\",\"type\":{\"type\":\"fixed\",\"name\":\"Simple\",\"namespace\":\"explicit\",\"doc\":\"A simple name (attribute) and a namespace (attribute); the fullname is 'explicit.Simple' (this is a different type than of the 'inheritNull' field).\",\"size\":12}},{\"name\":\"fullName\",\"type\":{\"type\":\"record\",\"name\":\"Name\",\"namespace\":\"a.full\",\"doc\":\"A name attribute with a fullname, so the namespace attribute is ignored. The fullname is 'a.full.Name', and the namespace is 'a.full'.\",\"fields\":[{\"name\":\"inheritNamespace\",\"type\":{\"type\":\"enum\",\"name\":\"Understanding\",\"doc\":\"A simple name (attribute) and no namespace attribute: inherit the namespace of the enclosing type 'a.full.Name'. The fullname is 'a.full.Understanding'.\",\"symbols\":[\"d\",\"e\"]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Example> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Example> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Example> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Example> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Example> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Example to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Example from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Example instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Example fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Simple inheritNull;
  private explicit.Simple explicitNamespace;
  private a.full.Name fullName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Example() {}

  /**
   * All-args constructor.
   * @param inheritNull The new value for inheritNull
   * @param explicitNamespace The new value for explicitNamespace
   * @param fullName The new value for fullName
   */
  public Example(Simple inheritNull, explicit.Simple explicitNamespace, a.full.Name fullName) {
    this.inheritNull = inheritNull;
    this.explicitNamespace = explicitNamespace;
    this.fullName = fullName;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return inheritNull;
    case 1: return explicitNamespace;
    case 2: return fullName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: inheritNull = (Simple)value$; break;
    case 1: explicitNamespace = (explicit.Simple)value$; break;
    case 2: fullName = (a.full.Name)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'inheritNull' field.
   * @return The value of the 'inheritNull' field.
   */
  public Simple getInheritNull() {
    return inheritNull;
  }


  /**
   * Sets the value of the 'inheritNull' field.
   * @param value the value to set.
   */
  public void setInheritNull(Simple value) {
    this.inheritNull = value;
  }

  /**
   * Gets the value of the 'explicitNamespace' field.
   * @return The value of the 'explicitNamespace' field.
   */
  public explicit.Simple getExplicitNamespace() {
    return explicitNamespace;
  }


  /**
   * Sets the value of the 'explicitNamespace' field.
   * @param value the value to set.
   */
  public void setExplicitNamespace(explicit.Simple value) {
    this.explicitNamespace = value;
  }

  /**
   * Gets the value of the 'fullName' field.
   * @return The value of the 'fullName' field.
   */
  public a.full.Name getFullName() {
    return fullName;
  }


  /**
   * Sets the value of the 'fullName' field.
   * @param value the value to set.
   */
  public void setFullName(a.full.Name value) {
    this.fullName = value;
  }

  /**
   * Creates a new Example RecordBuilder.
   * @return A new Example RecordBuilder
   */
  public static Example.Builder newBuilder() {
    return new Example.Builder();
  }

  /**
   * Creates a new Example RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Example RecordBuilder
   */
  public static Example.Builder newBuilder(Example.Builder other) {
    if (other == null) {
      return new Example.Builder();
    } else {
      return new Example.Builder(other);
    }
  }

  /**
   * Creates a new Example RecordBuilder by copying an existing Example instance.
   * @param other The existing instance to copy.
   * @return A new Example RecordBuilder
   */
  public static Example.Builder newBuilder(Example other) {
    if (other == null) {
      return new Example.Builder();
    } else {
      return new Example.Builder(other);
    }
  }

  /**
   * RecordBuilder for Example instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Example>
    implements org.apache.avro.data.RecordBuilder<Example> {

    private Simple inheritNull;
    private explicit.Simple explicitNamespace;
    private a.full.Name fullName;
    private a.full.Name.Builder fullNameBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Example.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.inheritNull)) {
        this.inheritNull = data().deepCopy(fields()[0].schema(), other.inheritNull);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.explicitNamespace)) {
        this.explicitNamespace = data().deepCopy(fields()[1].schema(), other.explicitNamespace);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fullName)) {
        this.fullName = data().deepCopy(fields()[2].schema(), other.fullName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasFullNameBuilder()) {
        this.fullNameBuilder = a.full.Name.newBuilder(other.getFullNameBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Example instance
     * @param other The existing instance to copy.
     */
    private Builder(Example other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.inheritNull)) {
        this.inheritNull = data().deepCopy(fields()[0].schema(), other.inheritNull);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.explicitNamespace)) {
        this.explicitNamespace = data().deepCopy(fields()[1].schema(), other.explicitNamespace);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fullName)) {
        this.fullName = data().deepCopy(fields()[2].schema(), other.fullName);
        fieldSetFlags()[2] = true;
      }
      this.fullNameBuilder = null;
    }

    /**
      * Gets the value of the 'inheritNull' field.
      * @return The value.
      */
    public Simple getInheritNull() {
      return inheritNull;
    }


    /**
      * Sets the value of the 'inheritNull' field.
      * @param value The value of 'inheritNull'.
      * @return This builder.
      */
    public Example.Builder setInheritNull(Simple value) {
      validate(fields()[0], value);
      this.inheritNull = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'inheritNull' field has been set.
      * @return True if the 'inheritNull' field has been set, false otherwise.
      */
    public boolean hasInheritNull() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'inheritNull' field.
      * @return This builder.
      */
    public Example.Builder clearInheritNull() {
      inheritNull = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'explicitNamespace' field.
      * @return The value.
      */
    public explicit.Simple getExplicitNamespace() {
      return explicitNamespace;
    }


    /**
      * Sets the value of the 'explicitNamespace' field.
      * @param value The value of 'explicitNamespace'.
      * @return This builder.
      */
    public Example.Builder setExplicitNamespace(explicit.Simple value) {
      validate(fields()[1], value);
      this.explicitNamespace = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'explicitNamespace' field has been set.
      * @return True if the 'explicitNamespace' field has been set, false otherwise.
      */
    public boolean hasExplicitNamespace() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'explicitNamespace' field.
      * @return This builder.
      */
    public Example.Builder clearExplicitNamespace() {
      explicitNamespace = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullName' field.
      * @return The value.
      */
    public a.full.Name getFullName() {
      return fullName;
    }


    /**
      * Sets the value of the 'fullName' field.
      * @param value The value of 'fullName'.
      * @return This builder.
      */
    public Example.Builder setFullName(a.full.Name value) {
      validate(fields()[2], value);
      this.fullNameBuilder = null;
      this.fullName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fullName' field has been set.
      * @return True if the 'fullName' field has been set, false otherwise.
      */
    public boolean hasFullName() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'fullName' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public a.full.Name.Builder getFullNameBuilder() {
      if (fullNameBuilder == null) {
        if (hasFullName()) {
          setFullNameBuilder(a.full.Name.newBuilder(fullName));
        } else {
          setFullNameBuilder(a.full.Name.newBuilder());
        }
      }
      return fullNameBuilder;
    }

    /**
     * Sets the Builder instance for the 'fullName' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Example.Builder setFullNameBuilder(a.full.Name.Builder value) {
      clearFullName();
      fullNameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fullName' field has an active Builder instance
     * @return True if the 'fullName' field has an active Builder instance
     */
    public boolean hasFullNameBuilder() {
      return fullNameBuilder != null;
    }

    /**
      * Clears the value of the 'fullName' field.
      * @return This builder.
      */
    public Example.Builder clearFullName() {
      fullName = null;
      fullNameBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Example build() {
      try {
        Example record = new Example();
        record.inheritNull = fieldSetFlags()[0] ? this.inheritNull : (Simple) defaultValue(fields()[0]);
        record.explicitNamespace = fieldSetFlags()[1] ? this.explicitNamespace : (explicit.Simple) defaultValue(fields()[1]);
        if (fullNameBuilder != null) {
          try {
            record.fullName = this.fullNameBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("fullName"));
            throw e;
          }
        } else {
          record.fullName = fieldSetFlags()[2] ? this.fullName : (a.full.Name) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Example>
    WRITER$ = (org.apache.avro.io.DatumWriter<Example>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Example>
    READER$ = (org.apache.avro.io.DatumReader<Example>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.inheritNull.ordinal());

    out.writeFixed(this.explicitNamespace.bytes(), 0, 12);

    this.fullName.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.inheritNull = Simple.values()[in.readEnum()];

      if (this.explicitNamespace == null) {
        this.explicitNamespace = new explicit.Simple();
      }
      in.readFixed(this.explicitNamespace.bytes(), 0, 12);

      if (this.fullName == null) {
        this.fullName = new a.full.Name();
      }
      this.fullName.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.inheritNull = Simple.values()[in.readEnum()];
          break;

        case 1:
          if (this.explicitNamespace == null) {
            this.explicitNamespace = new explicit.Simple();
          }
          in.readFixed(this.explicitNamespace.bytes(), 0, 12);
          break;

        case 2:
          if (this.fullName == null) {
            this.fullName = new a.full.Name();
          }
          this.fullName.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










